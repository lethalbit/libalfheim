# SPDX-License-Identifier: BSD-3-Clause

# Configuration data for the `xylene_config.hh` header
config = configuration_data()
config.set('AUTOGEN_HEADER', '/* THIS FILE IS AUTOGENERATED, DO NOT EDIT */')
## Version Information
config.set('COMPILER_NAME', cxx.get_id())
config.set('COMPILER_VERSION', cxx.version())
## Platform information
config.set('TARGET_SYS', target_machine.system())
config.set('TARGET_ARCH', target_machine.cpu())
config.set('TARGET_ENDIAN', 'endian_t::@0@'.format(target_machine.endian()))
config.set('TARGET_WIDTH', meson.get_compiler('cpp', native: false).sizeof('void*'))

config.set('BUILD_SYS', build_machine.system())
config.set('BUILD_ARCH', build_machine.cpu())
config.set('BUILD_ENDIAN', 'endian_t::@0@'.format(build_machine.endian()))
config.set('BUILD_WIDTH', meson.get_compiler('cpp', native: true).sizeof('void*'))

## Misc
config.set('BUGREPORT_URL', get_option('bugreport_url'))

git = find_program('git', required: false, native: true)
if git.found()
	git_hash = run_command(git, 'rev-parse', '--short', 'HEAD').stdout().strip()
	if run_command(git, 'diff', '--quiet').returncode() != 0
		git_hash += '-dirty'
	endif
	config.set('GIT_HASH', git_hash)
	describe = run_command(git, 'describe', '--tag')
	if describe.returncode() == 0
		config.set('VERSION_NUMBER', describe.stdout().strip())
	else
		config.set('VERSION_NUMBER', '@0@-@1@'.format(meson.project_version(), git_hash))
	endif
else
	config.set('VERSION_NUMBER', meson.project_version())
endif

config_header = configure_file(
	configuration: config,
	input: 'config.hh.in',
	output: 'config.hh'
)

library_deps = [
	zlib,
]

library_hdrs = files([
	'aout.hh',
	'coff.hh',
	'ecoff.hh',
	'elf.hh',
	'macho.hh',
	'os360.hh',
	'pe32.hh',
	'xcoff.hh',
])

library_srcs = files([
	'aout.cc',
	'coff.cc',
	'ecoff.cc',
	'elf.cc',
	'macho.cc',
	'os360.cc',
	'pe32.cc',
	'xcoff.cc',
])

subdir('internal')

subdir('aout')
subdir('coff')
subdir('ecoff')
subdir('elf')
subdir('macho')
subdir('os360')
subdir('pe32')
subdir('xcoff')


libalfheim = library(
	'libalfheim',
	library_srcs,

	include_directories: [
		library_inc,
	],
	dependencies: [
		library_deps,
	],

	name_prefix: '',
	pic: true,
	gnu_symbol_visibility: 'inlineshidden',
	implicit_include_directories: false,

	cpp_args: [
		'-DLIBALFHEIM_BUILD_INTERNAL'
	],
	install: (not meson.is_subproject())
)

libalfheim_dep = declare_dependency(
	include_directories: [
		library_inc,
	],
	dependencies: [
		library_deps,
	],
	link_with: libalfheim,
	version: meson.project_version(),
)

if not meson.is_subproject()
	install_headers(
		library_hdrs + [ config_header ],
		subdir: 'libalfheim'
	)

	pkgconfig = import('pkgconfig')
	pkgconfig.generate(
		subdirs: '.',
		name: 'libalfheim',
		filebase: 'libalfheim',
		libraries: [ libalfheim ],
		version: meson.project_version(),
		description: 'A C++17 library for parsing and generating various object file formats.'
	)
endif
